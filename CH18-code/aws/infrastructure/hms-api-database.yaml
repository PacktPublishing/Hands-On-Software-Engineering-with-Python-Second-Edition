Transform: AWS::Serverless-2016-10-31

Description:
  The infrastructure definition for the Serverless MySQL database for the HMS API.

Parameters:
  Environment:
    Type: String
    Description: |
      The "environment" that the stack will be deployed
      to (dev, test, stage, production). Used to identify
      and name resources based on their environment.
    AllowedValues:
      - dev
      - test
      - stage
      - production
  Application:
    Type: String
    Description: |
      The name of the service/application.
    Default: hms-api-db
  DatabaseEngineVersion:
    Type: String
    Default: 8.0.mysql_aurora.3.08.2
    Description: |
      The Aurora RDS MySQL-compatible engine version.
  SubnetID1:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-03b02967bf1e1c096
    Description: |
      The first networking subnet that the database has access to.
  SubnetID2:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-014e6936b99d92025
    Description: |
      The second networking subnet that the database has access to.
  SecurityGroup:
    Type: String
    Default: sg-0786458eb809e0070
    Description: |
      The network security group that controls access to the database.
      Look this up in VPC > Security Groups if needed.
  VPCID:
    Type: AWS::EC2::VPC::Id
    Default: vpc-0378d86cb667eea52
    Description: |
      The ID of the VPC that this stack deploys to.

Resources:

  APIMySQLSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub ${Environment}_mysql_subnets
      SubnetIds:
        - !Ref SubnetID1
        - !Ref SubnetID2

  APIServerlessMySQLCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      EngineVersion: !Ref DatabaseEngineVersion
      EngineMode: provisioned
      DBClusterIdentifier: !Sub ${Environment}-serverless-mysql-cluster
      DBSubnetGroupName: !Ref APIMySQLSubnetGroup
      MasterUsername: !Sub "{{resolve:secretsmanager:/${Environment}/hms-backend/${Application}/database/master-secret:SecretString:username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:/${Environment}/hms-backend/${Application}/database/master-secret:SecretString:password}}"
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 16
      VpcSecurityGroupIds:
        - !Ref SecurityGroup

  APIMySQLDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref APIServerlessMySQLCluster
      DBInstanceClass: db.serverless
      Engine: aurora-mysql
      EngineVersion: !Ref DatabaseEngineVersion
      DBSubnetGroupName: !Ref APIMySQLSubnetGroup

  # -- Lambda SG with explicit egress rules --------------
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Lambda SG for ${Environment}-${Application}
      VpcId: !Ref VPCID
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          DestinationSecurityGroupId: !Ref SecurityGroup

  # -- SG to allow access to the Secrets Manager service -
  SecretsEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Secrets Manager VPCE SG for ${Environment}-${Application}
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LambdaSecurityGroup   # allow Lambda -> endpoint
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0  # default egress (endpoint will initiate back to AWS infra)

  # -- Secrets Manager VPC Endpoint ----------------------
  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcId: !Ref VPCID
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref SubnetID1
        - !Ref SubnetID2
      SecurityGroupIds:
        - !Ref SecretsEndpointSecurityGroup
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "secretsmanager:*"
            Resource: "*"

  # -- SG to allow access to the Secrets Manager service -
  SSMEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub SSM VPCE SG for ${Environment}-${Application}
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LambdaSecurityGroup   # allow Lambda -> endpoint
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0  # default egress (endpoint will initiate back to AWS infra)

  # -- SSM VPC Endpoint ----------------------------------
  SSMVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPCID
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref SubnetID1
        - !Ref SubnetID2
      SecurityGroupIds:
        - !Ref SSMEndpointSecurityGroup
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - "ssm:GetParameter"
              - "ssm:GetParameters"
              - "ssm:GetParametersByPath"
            Resource: "*"

  # -- Lambda SG with explicit egress rules --------------
  DBAccessFromLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306

  # -- Placeholder Lambda Function for testing DB access -
  DBClusterTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-${Application}-cluster-test-function
      Runtime: python3.11
      Handler: db_cluster_test.lambda_handler
      CodeUri: s3://hosewp-hms-dev-lambda-package-bucket/db_cluster_test.zip
      MemorySize: 512
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref SubnetID1
          - !Ref SubnetID2
      Environment:
        Variables:
          DB_SECRET_NAME: !Sub /${Environment}/hms-backend/${Application}/database/master-secret
          DB_ENDPOINT: !GetAtt APIServerlessMySQLCluster.Endpoint.Address
          DB_PORT: !GetAtt APIServerlessMySQLCluster.Endpoint.Port
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${Environment}/hms-backend/${Application}/database/master-secret*

  # -- CodeBuild to run the database updates, and related resources
#  DBUpdaterProject:
#    Type: AWS::CodeBuild::Project
#    Properties:
#      Artifacts:
#        Type: NO_ARTIFACTS
#      Environment:
#        ComputeType: BUILD_GENERAL1_SMALL
#        Image: Amazon Linux 2 x86_64 Lambda standard:python3.11
#        Type: LINUX_CONTAINER
#        EnvironmentVariables:
#          - Name: MYSQL_MASTER_USER
#            Value: !Sub /${Environment}/hms-backend/${Application}/database/master-secret:username
#            Type: SECRETS_MANAGER
#          - Name: MYSQL_MASTER_PASS
#            Value: !Sub /${Environment}/hms-backend/${Application}/database/master-secret:password
#            Type: SECRETS_MANAGER
#          - Name: MYSQL_HOST
#            Value: !Ref APIMySQLDatabase
#          - Name: MYSQL_PORT
#            Value: !GetAtt APIMySQLDatabase.Endpoint.Port
#          - Name: MYSQL_DB
#            Value: !Sub ${Environment}_api_database
#          - Name: MYSQL_SERVICE_USER
#            Value: !Sub /${Environment}/hms-backend/${Application}/database/MYSQL_USER
#            Type: PARAMETER_STORE
#          - Name: MYSQL_SERVICE_PASS
#            Value: !Sub /${Environment}/hms-backend/${Application}/database/MYSQL_PASS
#            Type: PARAMETER_STORE
#      Source:
#        Type: NO_SOURCE
#        BuildSpec:aws/buildspec-examples/database-population-buildspec.yaml
#      ServiceRole: # TODO: Create a role and reference it here

Outputs:
  DBMasterUserSecret:
    Description: The name of the Secrets Manager secret that tracks the master user username and password values.
    Value: !Sub /${Environment}/hms-backend/${Application}/database/master-secret
    Export:
      Name: !Sub ${Environment}-${Application}-master-user-secret
  DBClusterARN:
    Description: The Amazon Resource Name (ARN) for the DB cluster.
    Value: !GetAtt APIServerlessMySQLCluster.DBClusterArn
    Export:
      Name: !Sub ${Environment}-${Application}-cluster-arn
  DBClusterName:
    Description: The Name of the DB cluster.
    Value: !Ref APIServerlessMySQLCluster
    Export:
      Name: !Sub ${Environment}-${Application}-cluster-name
  DBInstanceName:
    Description: The Name of the DB instance.
    Value: !Ref APIMySQLDatabase
    Export:
      Name: !Sub ${Environment}-${Application}-instance-name
  DBName:
    Description: The name of the API database.
    Value: !Sub ${Environment}_api_database
    Export:
      Name: !Sub ${Environment}-${Application}-database-name
  DBClusterEndpointAddress:
    Description: The connection endpoint for the DB cluster.
    Value: !GetAtt APIServerlessMySQLCluster.Endpoint.Address
    Export:
      Name: !Sub ${Environment}-${Application}-cluster-endpoint-address
  DBClusterEndpointPort:
    Description: The port number that will accept connections on the DB cluster.
    Value: !GetAtt APIServerlessMySQLCluster.Endpoint.Port
    Export:
      Name: !Sub ${Environment}-${Application}-cluster-endpoint-port
  DBInstanceARN:
    Description: The Amazon Resource Name (ARN) for the DB instance.
    Value: !GetAtt APIMySQLDatabase.DBInstanceArn
    Export:
      Name: !Sub ${Environment}-${Application}-instance-arn
  DBInstanceEndpointAddress:
    Description: The connection endpoint for the DB instance.
    Value: !GetAtt APIMySQLDatabase.Endpoint.Address
    Export:
      Name: !Sub ${Environment}-${Application}-instance-endpoint-address
  DBInstanceEndpointPort:
    Description: The port number that will accept connections on the DB instance.
    Value: !GetAtt APIMySQLDatabase.Endpoint.Port
    Export:
      Name: !Sub ${Environment}-${Application}-instance-endpoint-port
  Subnet1Export:
    Description: Subnet 1 ID for Lambda VPC config
    Value: !Ref SubnetID1
    Export:
      Name: !Sub ${Environment}-${Application}-subnet1
  Subnet2Export:
    Description: Subnet 2 ID for Lambda VPC config
    Value: !Ref SubnetID2
    Export:
      Name: !Sub ${Environment}-${Application}-subnet2
  LambdaSecurityGroupExport:
    Description: Security group that allows Lambda to talk to the DB
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub ${Environment}-${Application}-lambda-access-sg

# To use these imports in another stack that defines one or more Lambdas that use their values:

# Globals:
#   Function:
#     Runtime: python3.11
#     VpcConfig:
#       SecurityGroupIds:
#         - !ImportValue ${Environment}-hms-api-db-lambda-access-sg
#       SubnetIds:
#         - !ImportValue ${Environment}-hms-api-db-subnet1
#         - !ImportValue ${Environment}-hms-api-db-subnet2
#     Environment:
#       Variables:
#         DB_SECRET_NAME: !Sub /${Environment}/hms-backend/${Application}/database/master-secret
#         DB_ENDPOINT: !ImportValue ${Environment}-hms-api-db-cluster-endpoint-address
#         DB_PORT: !ImportValue ${Environment}-hms-api-db-cluster-endpoint-port

# Resources:
#   MyOtherLambda:
#     Type: AWS::Serverless::Function
#     Properties:
#       Handler: my_func.lambda_handler
#       CodeUri: src/my_func/
